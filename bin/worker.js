// Generated by CoffeeScript 1.7.1
var Table, USER_HEAD, checkOptions, configFilePath, fs, gitlab, gitlabDircPath, makeTableByProject, makeTableByUser, nconf, path, requireOrGetGitlab;

checkOptions = function() {
  if (!nconf.get("url")) {
    console.log("You should set url by 'gitlab --url http://example.com' ");
    return false;
  }
  if (!nconf.get("token")) {
    console.log("You should set token by 'gitlab --token abcdefghij123456' ");
    return false;
  }
  return true;
};

makeTableByUser = function(user) {
  var raw, table;
  table = new Table({
    head: USER_HEAD
  });
  raw = {};
  raw[user.id] = [user.name || "", user.username || "", user.state || "", user.email || "", user.created_at || ""];
  table.push(raw);
  console.log(table.toString());
};

makeTableByProject = function(project) {
  var key, map, raw, table, _i, _len;
  table = new Table({
    head: ["key", "value"]
  });
  map = ["id", "description", "default_branch", "public", "archived", "visibility_level", "ssh_url_to_repo", "http_url_to_repo", "web_url", "name", "name_with_namespace", "path", "path_with_namespace", "issues_enabled", "merge_requests_enabled", "wiki_enabled", "snippets_enabled", "created_at", "last_activity_at"];
  for (_i = 0, _len = map.length; _i < _len; _i++) {
    key = map[_i];
    raw = {};
    raw[key] = [project[key] || ""];
    table.push(raw);
  }
  console.log(table.toString());
};

nconf = require("nconf");

Table = require("cli-table");

fs = require("fs");

path = require("path");

gitlabDircPath = path.join(process.env[(process.platform === "win32" ? "USERPROFILE" : "HOME")], ".gitlab");

if (!fs.existsSync(gitlabDircPath)) {
  fs.mkdirSync(gitlabDircPath);
}

configFilePath = path.join(gitlabDircPath, "config.json");

nconf.file({
  file: configFilePath
});

gitlab = null;

requireOrGetGitlab = function() {
  if (gitlab != null) {
    return gitlab;
  } else {
    if (checkOptions()) {
      gitlab = require("gitlab")({
        url: nconf.get("url"),
        token: nconf.get("token")
      });
      return gitlab;
    }
  }
};

USER_HEAD = ["id", "name", "username", "state", "email", "created_at"];

exports.users = {
  all: function() {
    return requireOrGetGitlab().users.all(function(users) {
      var raw, table, user, _i, _len;
      if (!users.length) {
        return;
      }
      table = new Table({
        head: USER_HEAD
      });
      users.sort(function(user1, user2) {
        return parseInt(user1.id) - parseInt(user2.id);
      });
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        raw = {};
        raw[user.id] = [user.name || "", user.username || "", user.state || "", user.email || "", user.created_at || ""];
        table.push(raw);
      }
      console.log(table.toString());
    });
  },
  current: function() {
    requireOrGetGitlab().users.current(makeTableByUser);
  },
  show: function(userId) {
    requireOrGetGitlab().users.show(userId, makeTableByUser);
  }
};

exports.projects = {
  all: function() {
    return requireOrGetGitlab().projects.all(function(projects) {
      var project, _i, _len;
      if (!projects.length) {
        return;
      }
      projects.sort(function(project1, project2) {
        return parseInt(project1.id) - parseInt(project2.id);
      });
      for (_i = 0, _len = projects.length; _i < _len; _i++) {
        project = projects[_i];
        makeTableByProject(project);
      }
    });
  },
  show: function(userId) {
    requireOrGetGitlab().projects.show(userId, makeTableByProject);
  }
};

exports.setUrl = function(url) {
  nconf.set("url", url);
  nconf.save();
  return console.log("Save url");
};

exports.setToken = function(token) {
  nconf.set("token", token);
  nconf.save();
  return console.log("Save token");
};

exports.getOption = function() {
  console.log("url: ", nconf.get("url"));
  return console.log("token: ", nconf.get("token"));
};
